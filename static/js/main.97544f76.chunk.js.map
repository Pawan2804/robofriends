{"version":3,"sources":["serviceWorker.js","Components/Card.js","Components/CardList.js","Components/SearchBox.js","Components/Scroll.js","Containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","className","alt","src","id","name","email","CardList","robots","robo_array","map","user","i","key","SearchBox","search","type","placeholder","onChange","Scroll","style","overflowY","height","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","fr","this","filter","toLowerCase","includes","React","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCFSC,EAdF,SAACC,GACb,OACC,yBAAKC,UAAU,uDACf,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAAMI,GAAhC,gBACrB,6BACA,4BAAKJ,EAAMK,MACX,2BAAIL,EAAMM,UCUGC,EAbE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OACZC,EAAWD,EAAOE,KAAI,SAACC,EAAKC,GACjC,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EACjBR,GAAII,EAAOI,GAAGR,GACdC,KAAMG,EAAOI,GAAGP,KAChBC,MAAOE,EAAOI,GAAGN,WAEnB,OACC,6BACIG,ICJSK,EARG,SAAC,GAAa,IAAZC,EAAW,EAAXA,OACnB,OACC,yBAAKd,UAAU,MACf,2BAAOA,UAAU,mCAAmCe,KAAK,SAASC,YAAY,gBAC9EC,SAAUH,MCEGI,G,MAND,SAACnB,GACd,OACA,yBAAKC,UAAU,0BAA0BmB,MAAO,CAACC,UAAW,SAASC,OAAQ,UAC3EtB,EAAMuB,YCsCMC,E,kDApCb,aAAc,IAAD,8BACZ,gBAMDC,eAAe,SAACC,GAChB,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SANvC,EAAKC,MAAM,CACZvB,OAAQ,GACRoB,YAAY,IAJA,E,gEAYM,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAW,OAAOA,EAASC,UAEhCF,MAAK,SAAAG,GAAQ,EAAKT,SAAS,CAACnB,OAAQ4B,S,+BAI7B,IAAD,OACDC,EAAGC,KAAKP,MAAMvB,OAAO+B,QAAO,SAAA/B,GACjC,OAAOA,EAAOH,KAAKmC,cAAcC,SAAS,EAAKV,MAAMH,YAAYY,kBAEnE,OACC,yBAAKvC,UAAU,MACf,8CAEA,kBAAC,EAAD,CAAWc,OAAQuB,KAAKb,iBACxB,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAUjB,OAAQ6B,U,GA/BFK,IAAMC,WCCxBC,IAASC,OACL,kBAAC,EAAD,MACHC,SAASC,eAAe,SN0HnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.97544f76.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nconst Card = (props) =>{\r\n\treturn(\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t<img alt='robots' src={`https://robohash.org/${props.id}?200x200}/`} />\r\n\t\t<div>\r\n\t\t<h2>{props.name}</h2>\t\t\r\n\t\t<p>{props.email}</p>\r\n\t\t</div>\r\n\t\t</div>\r\n\t\t);\r\n\r\n}\r\n\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\n\r\nconst CardList = ({robots}) =>{\r\n\tconst robo_array=robots.map((user,i)=>{\r\n\t\treturn <Card key={i} \r\n\t\t\tid={robots[i].id} \r\n\t\t\tname={robots[i].name}\r\n\t\t\temail={robots[i].email}/>\r\n\t});\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t\t\t{robo_array}\r\n\t\t\t\t</div>\r\n\t\t);\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({search})=> {\r\n\treturn (\r\n\t\t<div className=\"tc\">\r\n\t\t<input className=\"pa3 ba b--green bg-lightest-blue\" type='search' placeholder='search robots'\r\n\t\tonChange={search}/>\r\n\t\t</div>\r\n\t\t);\r\n}\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll =(props) =>{\r\n\treturn(\r\n\t<div className=\"ba bw3 b--lightest-blue\" style={{overflowY: 'scroll',height: '800px'}}>\r\n\t {props.children}\r\n\t</div>);\r\n};\r\nexport default Scroll;","import React from 'react';\r\nimport CardList from '../Components/CardList';\r\nimport SearchBox from '../Components/SearchBox';\r\nimport './App.css';\r\nimport Scroll from '../Components/Scroll';\r\n\r\nclass App extends React.Component {\r\n\t\tconstructor(){\r\n\t\t\tsuper()\r\n\t\t\t this.state={\r\n\t\t\trobots: [],\r\n\t\t\tsearchfield:''\r\n\t\t\t}\r\n\t\t}\r\n\t onSearchChange=(event)=>{\r\n\t\tthis.setState({searchfield: event.target.value});\r\n\t\t\r\n\t\t\r\n\t}\r\n\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response=>{return response.json();\r\n\t\t})\r\n\t\t.then(users=>{this.setState({robots: users})\r\n\t});\r\n\t}\r\n\r\n\trender(){\r\n\t\tconst fr=this.state.robots.filter(robots =>{\r\n\t\t\treturn robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n\t\t})\r\n\treturn  (\r\n\t\t<div className=\"tc\">\r\n\t\t<h1> Robo Friends </h1>\r\n\r\n\t\t<SearchBox search={this.onSearchChange}/>\r\n\t\t<Scroll>\r\n\t\t<CardList robots={fr}/>\r\n\t\t</Scroll>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n}\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\nimport App from './Containers/App';\r\n\r\nReactDOM.render(\r\n\t\t\t\t<App />\r\n,document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}